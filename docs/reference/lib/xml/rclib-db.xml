<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
]>
<refentry id="RCLibDb">
<refmeta>
<refentrytitle role="top_of_page" id="RCLibDb.top_of_page">RCLibDb</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  LIBRHYTHMCAT Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>RCLibDb</refname>
<refpurpose>The playlist database</refpurpose>
</refnamediv>

<refsynopsisdiv id="RCLibDb.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
#include &lt;rclib-db.h&gt;

#define             <link linkend="RCLIB-DB-TYPE:CAPS">RCLIB_DB_TYPE</link>
struct              <link linkend="RCLibDb-struct">RCLibDb</link>;
struct              <link linkend="RCLibDbCatalogData">RCLibDbCatalogData</link>;
enum                <link linkend="RCLibDbCatalogType">RCLibDbCatalogType</link>;
struct              <link linkend="RCLibDbClass">RCLibDbClass</link>;
struct              <link linkend="RCLibDbPlaylistData">RCLibDbPlaylistData</link>;
enum                <link linkend="RCLibDbPlaylistType">RCLibDbPlaylistType</link>;
<link linkend="GSequenceIter"><returnvalue>GSequenceIter</returnvalue></link> *     <link linkend="rclib-db-catalog-add">rclib_db_catalog_add</link>                (<parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>,
                                                         <parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> type</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-catalog-data-free">rclib_db_catalog_data_free</link>          (<parameter><link linkend="RCLibDbCatalogData"><type>RCLibDbCatalogData</type></link> *data</parameter>);
<link linkend="RCLibDbCatalogData"><returnvalue>RCLibDbCatalogData</returnvalue></link> * <link linkend="rclib-db-catalog-data-new">rclib_db_catalog_data_new</link>          ();
<link linkend="RCLibDbCatalogData"><returnvalue>RCLibDbCatalogData</returnvalue></link> * <link linkend="rclib-db-catalog-data-ref">rclib_db_catalog_data_ref</link>          (<parameter><link linkend="RCLibDbCatalogData"><type>RCLibDbCatalogData</type></link> *data</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-catalog-data-unref">rclib_db_catalog_data_unref</link>         (<parameter><link linkend="RCLibDbCatalogData"><type>RCLibDbCatalogData</type></link> *data</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-catalog-delete">rclib_db_catalog_delete</link>             (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-catalog-reorder">rclib_db_catalog_reorder</link>            (<parameter><link linkend="gint"><type>gint</type></link> *new_order</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-catalog-set-name">rclib_db_catalog_set_name</link>           (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-catalog-set-type">rclib_db_catalog_set_type</link>           (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter><link linkend="RCLibDbCatalogType"><type>RCLibDbCatalogType</type></link> type</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-exit">rclib_db_exit</link>                       ();
<link linkend="GSequence"><returnvalue>GSequence</returnvalue></link> *         <link linkend="rclib-db-get-catalog">rclib_db_get_catalog</link>                ();
<link linkend="GObject"><returnvalue>GObject</returnvalue></link> *           <link linkend="rclib-db-get-instance">rclib_db_get_instance</link>               ();
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="rclib-db-init">rclib_db_init</link>                       (<parameter>const <link linkend="gchar"><type>gchar</type></link> *file</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-playlist-add-directory">rclib_db_playlist_add_directory</link>     (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *insert_iter</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *dir</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-playlist-add-m3u-file">rclib_db_playlist_add_m3u_file</link>      (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *insert_iter</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-playlist-add-music">rclib_db_playlist_add_music</link>         (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *insert_iter</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *uri</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-playlist-add-music-and-play">rclib_db_playlist_add_music_and_play</link>
                                                        (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *insert_iter</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *uri</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-playlist-data-free">rclib_db_playlist_data_free</link>         (<parameter><link linkend="RCLibDbPlaylistData"><type>RCLibDbPlaylistData</type></link> *data</parameter>);
<link linkend="RCLibDbPlaylistData"><returnvalue>RCLibDbPlaylistData</returnvalue></link> * <link linkend="rclib-db-playlist-data-new">rclib_db_playlist_data_new</link>        ();
<link linkend="RCLibDbPlaylistData"><returnvalue>RCLibDbPlaylistData</returnvalue></link> * <link linkend="rclib-db-playlist-data-ref">rclib_db_playlist_data_ref</link>        (<parameter><link linkend="RCLibDbPlaylistData"><type>RCLibDbPlaylistData</type></link> *data</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-playlist-data-unref">rclib_db_playlist_data_unref</link>        (<parameter><link linkend="RCLibDbPlaylistData"><type>RCLibDbPlaylistData</type></link> *data</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-playlist-delete">rclib_db_playlist_delete</link>            (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="rclib-db-playlist-export-all-m3u-files">rclib_db_playlist_export_all_m3u_files</link>
                                                        (<parameter>const <link linkend="gchar"><type>gchar</type></link> *dir</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="rclib-db-playlist-export-m3u-file">rclib_db_playlist_export_m3u_file</link>   (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *sfilename</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="rclib-db-playlist-get-album-bind">rclib_db_playlist_get_album_bind</link>    (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="rclib-db-playlist-get-lyric-bind">rclib_db_playlist_get_lyric_bind</link>    (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="rclib-db-playlist-get-lyric-secondary-bind">rclib_db_playlist_get_lyric_secondary_bind</link>
                                                        (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-playlist-import-cancel">rclib_db_playlist_import_cancel</link>     ();
<link linkend="gint"><returnvalue>gint</returnvalue></link>                <link linkend="rclib-db-playlist-import-queue-get-length">rclib_db_playlist_import_queue_get_length</link>
                                                        ();
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-playlist-move-to-another-catalog">rclib_db_playlist_move_to_another_catalog</link>
                                                        (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> **iters</parameter>,
                                                         <parameter><link linkend="guint"><type>guint</type></link> num</parameter>,
                                                         <parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *catalog_iter</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-playlist-refresh">rclib_db_playlist_refresh</link>           (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-playlist-refresh-cancel">rclib_db_playlist_refresh_cancel</link>    ();
<link linkend="gint"><returnvalue>gint</returnvalue></link>                <link linkend="rclib-db-playlist-refresh-queue-get-length">rclib_db_playlist_refresh_queue_get_length</link>
                                                        ();
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-playlist-reorder">rclib_db_playlist_reorder</link>           (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> *new_order</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-playlist-set-album-bind">rclib_db_playlist_set_album_bind</link>    (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-playlist-set-lyric-bind">rclib_db_playlist_set_lyric_bind</link>    (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-playlist-set-lyric-secondary-bind">rclib_db_playlist_set_lyric_secondary_bind</link>
                                                        (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-playlist-set-rating">rclib_db_playlist_set_rating</link>        (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> rating</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-playlist-set-type">rclib_db_playlist_set_type</link>          (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter><link linkend="RCLibDbPlaylistType"><type>RCLibDbPlaylistType</type></link> type</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="rclib-db-playlist-sync">rclib_db_playlist_sync</link>              ();
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-playlist-update-length">rclib_db_playlist_update_length</link>     (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter><link linkend="gint64"><type>gint64</type></link> length</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-playlist-update-metadata">rclib_db_playlist_update_metadata</link>   (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter>const <link linkend="RCLibDbPlaylistData"><type>RCLibDbPlaylistData</type></link> *data</parameter>);
<link linkend="gulong"><returnvalue>gulong</returnvalue></link>              <link linkend="rclib-db-signal-connect">rclib_db_signal_connect</link>             (<parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>,
                                                         <parameter><link linkend="GCallback"><type>GCallback</type></link> callback</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> data</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-db-signal-disconnect">rclib_db_signal_disconnect</link>          (<parameter><link linkend="gulong"><type>gulong</type></link> handler_id</parameter>);
</synopsis>
</refsynopsisdiv>
<refsect1 id="RCLibDb.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----RCLibDb
</synopsis>
</refsect1>
<refsect1 id="RCLibDb.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="RCLibDb-catalog-added">catalog-added</link>&quot;                                  : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link>
  &quot;<link linkend="RCLibDb-catalog-changed">catalog-changed</link>&quot;                                : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link>
  &quot;<link linkend="RCLibDb-catalog-delete">catalog-delete</link>&quot;                                 : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link>
  &quot;<link linkend="RCLibDb-catalog-reordered">catalog-reordered</link>&quot;                              : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link>
  &quot;<link linkend="RCLibDb-import-updated">import-updated</link>&quot;                                 : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link>
  &quot;<link linkend="RCLibDb-playlist-added">playlist-added</link>&quot;                                 : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link>
  &quot;<link linkend="RCLibDb-playlist-changed">playlist-changed</link>&quot;                               : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link>
  &quot;<link linkend="RCLibDb-playlist-delete">playlist-delete</link>&quot;                                : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link>
  &quot;<link linkend="RCLibDb-playlist-reordered">playlist-reordered</link>&quot;                             : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link>
  &quot;<link linkend="RCLibDb-refresh-updated">refresh-updated</link>&quot;                                : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link>
</synopsis>
</refsect1>

<refsect1 id="RCLibDb.description" role="desc">
<title role="desc.title">Description</title>
<para>
The <link linkend="RCLibDb"><type>RCLibDb</type></link> is a class which manages the playlists in the player,
all playlists are put in a catalog list, and all music are put in
their playlists. The catalog item (playlist) and playlist item (music)
data can be accessed by <link linkend="GSequenceIter"><type>GSequenceIter</type></link>. The database can import music
or playlist file asynchronously, or update the metadata in playlists
asynchronously.
</para>
</refsect1>
<refsect1 id="RCLibDb.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="RCLIB-DB-TYPE:CAPS" role="macro">
<title>RCLIB_DB_TYPE</title>
<indexterm zone="RCLIB-DB-TYPE:CAPS"><primary>RCLIB_DB_TYPE</primary></indexterm>
<programlisting>#define RCLIB_DB_TYPE (rclib_db_get_type())
</programlisting>
</refsect2>
<refsect2 id="RCLibDb-struct" role="struct">
<title>struct RCLibDb</title>
<indexterm zone="RCLibDb-struct"><primary>RCLibDb</primary></indexterm>
<programlisting>struct RCLibDb;</programlisting>
<para>
The playlist database. The contents of the <link linkend="RCLibDb"><type>RCLibDb</type></link> structure are
private and should only be accessed via the provided API.
</para></refsect2>
<refsect2 id="RCLibDbCatalogData" role="struct">
<title>struct RCLibDbCatalogData</title>
<indexterm zone="RCLibDbCatalogData"><primary>RCLibDbCatalogData</primary></indexterm>
<programlisting>struct RCLibDbCatalogData {
    GSequence *playlist;
    gchar *name;
    RCLibDbCatalogType type;
    gpointer store;
};
</programlisting>
<para>
The structure for catalog item data.
</para><variablelist role="struct">
<varlistentry><term><link linkend="GSequence"><type>GSequence</type></link>&#160;*<structfield id="RCLibDbCatalogData.playlist">playlist</structfield>;</term>
<listitem><simpara>a playlist</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCLibDbCatalogData.name">name</structfield>;</term>
<listitem><simpara>the name</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="RCLibDbCatalogType"><type>RCLibDbCatalogType</type></link>&#160;<structfield id="RCLibDbCatalogData.type">type</structfield>;</term>
<listitem><simpara>the type of the item in catalog</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gpointer"><type>gpointer</type></link>&#160;<structfield id="RCLibDbCatalogData.store">store</structfield>;</term>
<listitem><simpara>the store, used in UI</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="RCLibDbCatalogType" role="enum">
<title>enum RCLibDbCatalogType</title>
<indexterm zone="RCLibDbCatalogType"><primary>RCLibDbCatalogType</primary></indexterm>
<programlisting>typedef enum {
    RCLIB_DB_CATALOG_TYPE_PLAYLIST = 1
} RCLibDbCatalogType;
</programlisting>
<para>
The enum type for catalog type.
</para><variablelist role="enum">
<varlistentry id="RCLIB-DB-CATALOG-TYPE-PLAYLIST:CAPS" role="constant">
<term><literal>RCLIB_DB_CATALOG_TYPE_PLAYLIST</literal></term>
<listitem><simpara>the catalog is a playlist
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="RCLibDbClass" role="struct">
<title>struct RCLibDbClass</title>
<indexterm zone="RCLibDbClass"><primary>RCLibDbClass</primary></indexterm>
<programlisting>struct RCLibDbClass {
};
</programlisting>
<para>
<link linkend="RCLibDb"><type>RCLibDb</type></link> class.
</para></refsect2>
<refsect2 id="RCLibDbPlaylistData" role="struct">
<title>struct RCLibDbPlaylistData</title>
<indexterm zone="RCLibDbPlaylistData"><primary>RCLibDbPlaylistData</primary></indexterm>
<programlisting>struct RCLibDbPlaylistData {
    GSequenceIter *catalog;
    RCLibDbPlaylistType type;
    gchar *uri;
    gchar *title;
    gchar *artist;
    gchar *album;
    gchar *ftype;
    gint64 length;
    gint tracknum;
    gint year;
    guint rating;
    gchar *lyricfile;
    gchar *lyricsecfile;
    gchar *albumfile;
};
</programlisting>
<para>
The structure for playlist item data.
</para><variablelist role="struct">
<varlistentry><term><link linkend="GSequenceIter"><type>GSequenceIter</type></link>&#160;*<structfield id="RCLibDbPlaylistData.catalog">catalog</structfield>;</term>
<listitem><simpara>the catalog item data</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="RCLibDbPlaylistType"><type>RCLibDbPlaylistType</type></link>&#160;<structfield id="RCLibDbPlaylistData.type">type</structfield>;</term>
<listitem><simpara>the type of the item in playlist</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCLibDbPlaylistData.uri">uri</structfield>;</term>
<listitem><simpara>the URI</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCLibDbPlaylistData.title">title</structfield>;</term>
<listitem><simpara>the title</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCLibDbPlaylistData.artist">artist</structfield>;</term>
<listitem><simpara>the artist</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCLibDbPlaylistData.album">album</structfield>;</term>
<listitem><simpara>the album</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCLibDbPlaylistData.ftype">ftype</structfield>;</term>
<listitem><simpara>the format information</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gint64"><type>gint64</type></link>&#160;<structfield id="RCLibDbPlaylistData.length">length</structfield>;</term>
<listitem><simpara>the the duration (length) of the music (unit: nanosecond)</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gint"><type>gint</type></link>&#160;<structfield id="RCLibDbPlaylistData.tracknum">tracknum</structfield>;</term>
<listitem><simpara>the track number</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gint"><type>gint</type></link>&#160;<structfield id="RCLibDbPlaylistData.year">year</structfield>;</term>
<listitem><simpara>the year</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="guint"><type>guint</type></link>&#160;<structfield id="RCLibDbPlaylistData.rating">rating</structfield>;</term>
<listitem><simpara>the rating level</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCLibDbPlaylistData.lyricfile">lyricfile</structfield>;</term>
<listitem><simpara>the lyric binding file path</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCLibDbPlaylistData.lyricsecfile">lyricsecfile</structfield>;</term>
<listitem><simpara>the secondary lyric binding file path</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCLibDbPlaylistData.albumfile">albumfile</structfield>;</term>
<listitem><simpara>the album cover image binding file path</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="RCLibDbPlaylistType" role="enum">
<title>enum RCLibDbPlaylistType</title>
<indexterm zone="RCLibDbPlaylistType"><primary>RCLibDbPlaylistType</primary></indexterm>
<programlisting>typedef enum {
    RCLIB_DB_PLAYLIST_TYPE_MISSING = 0,
    RCLIB_DB_PLAYLIST_TYPE_MUSIC = 1,
    RCLIB_DB_PLAYLIST_TYPE_CUE = 2
} RCLibDbPlaylistType;
</programlisting>
<para>
The enum type for playlist type.
</para><variablelist role="enum">
<varlistentry id="RCLIB-DB-PLAYLIST-TYPE-MISSING:CAPS" role="constant">
<term><literal>RCLIB_DB_PLAYLIST_TYPE_MISSING</literal></term>
<listitem><simpara>the playlist item is missing
</simpara></listitem>
</varlistentry>
<varlistentry id="RCLIB-DB-PLAYLIST-TYPE-MUSIC:CAPS" role="constant">
<term><literal>RCLIB_DB_PLAYLIST_TYPE_MUSIC</literal></term>
<listitem><simpara>the playlist item is music
</simpara></listitem>
</varlistentry>
<varlistentry id="RCLIB-DB-PLAYLIST-TYPE-CUE:CAPS" role="constant">
<term><literal>RCLIB_DB_PLAYLIST_TYPE_CUE</literal></term>
<listitem><simpara>the playlist item is from CUE sheet
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-catalog-add" role="function">
<title>rclib_db_catalog_add ()</title>
<indexterm zone="rclib-db-catalog-add"><primary>rclib_db_catalog_add</primary></indexterm>
<programlisting><link linkend="GSequenceIter"><returnvalue>GSequenceIter</returnvalue></link> *     rclib_db_catalog_add                (<parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>,
                                                         <parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> type</parameter>);</programlisting>
<para>
Add a new playlist to the catalog before the <link linkend="iter"><type>iter</type></link>, if the <link linkend="iter"><type>iter</type></link>
is <link linkend="NULL:CAPS"><type>NULL</type></link>, it will be added to the end.
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>the name for the new playlist</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>insert position (before this <link linkend="iter"><type>iter</type></link>)</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>the type of the new playlist</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The iter to the new playlist in the catalog.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-catalog-data-free" role="function">
<title>rclib_db_catalog_data_free ()</title>
<indexterm zone="rclib-db-catalog-data-free"><primary>rclib_db_catalog_data_free</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_catalog_data_free          (<parameter><link linkend="RCLibDbCatalogData"><type>RCLibDbCatalogData</type></link> *data</parameter>);</programlisting>
<para>
Free the <link linkend="RCLibDbCatalogData"><type>RCLibDbCatalogData</type></link> structure.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the data to free</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-catalog-data-new" role="function">
<title>rclib_db_catalog_data_new ()</title>
<indexterm zone="rclib-db-catalog-data-new"><primary>rclib_db_catalog_data_new</primary></indexterm>
<programlisting><link linkend="RCLibDbCatalogData"><returnvalue>RCLibDbCatalogData</returnvalue></link> * rclib_db_catalog_data_new          ();</programlisting>
<para>
Create a new empty <link linkend="RCLibDbCatalogData"><type>RCLibDbCatalogData</type></link> structure,
and set the reference count to 1.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The new empty allocated <link linkend="RCLibCatalogData"><type>RCLibCatalogData</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-catalog-data-ref" role="function">
<title>rclib_db_catalog_data_ref ()</title>
<indexterm zone="rclib-db-catalog-data-ref"><primary>rclib_db_catalog_data_ref</primary></indexterm>
<programlisting><link linkend="RCLibDbCatalogData"><returnvalue>RCLibDbCatalogData</returnvalue></link> * rclib_db_catalog_data_ref          (<parameter><link linkend="RCLibDbCatalogData"><type>RCLibDbCatalogData</type></link> *data</parameter>);</programlisting>
<para>
Increase the reference of <link linkend="RCLibDbCatalogData"><type>RCLibDbCatalogData</type></link> by 1.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="RCLibDbCatalogData"><type>RCLibDbCatalogData</type></link> structure</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The <link linkend="RCLibDbCatalogData"><type>RCLibDbCatalogData</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-catalog-data-unref" role="function">
<title>rclib_db_catalog_data_unref ()</title>
<indexterm zone="rclib-db-catalog-data-unref"><primary>rclib_db_catalog_data_unref</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_catalog_data_unref         (<parameter><link linkend="RCLibDbCatalogData"><type>RCLibDbCatalogData</type></link> *data</parameter>);</programlisting>
<para>
Decrease the reference of <link linkend="RCLibDbCatalogData"><type>RCLibDbCatalogData</type></link> by 1.
If the reference down to zero, the structure will be freed.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="RCLibDbCatalogData"><type>RCLibDbCatalogData</type></link> structure</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The <link linkend="RCLibDbCatalogData"><type>RCLibDbCatalogData</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-catalog-delete" role="function">
<title>rclib_db_catalog_delete ()</title>
<indexterm zone="rclib-db-catalog-delete"><primary>rclib_db_catalog_delete</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_catalog_delete             (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>);</programlisting>
<para>
Delete the catalog pointed to by <link linkend="iter"><type>iter</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the iter to the catalog</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-catalog-reorder" role="function">
<title>rclib_db_catalog_reorder ()</title>
<indexterm zone="rclib-db-catalog-reorder"><primary>rclib_db_catalog_reorder</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_catalog_reorder            (<parameter><link linkend="gint"><type>gint</type></link> *new_order</parameter>);</programlisting>
<para>
Reorder the catalog to follow the order indicated by <parameter>new_order</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>new_order</parameter>&#160;:</term>
<listitem><simpara>an array of integers mapping the new position of
each child to its old position before the re-ordering,
i.e. <parameter>new_order</parameter><literal>[newpos] = oldpos</literal>. <emphasis role="annotation">[<acronym>array</acronym>]</emphasis></simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-catalog-set-name" role="function">
<title>rclib_db_catalog_set_name ()</title>
<indexterm zone="rclib-db-catalog-set-name"><primary>rclib_db_catalog_set_name</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_catalog_set_name           (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>);</programlisting>
<para>
Set the name of the catalog pointed to by <link linkend="iter"><type>iter</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the iter to the catalog</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>the new name for the catalog</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-catalog-set-type" role="function">
<title>rclib_db_catalog_set_type ()</title>
<indexterm zone="rclib-db-catalog-set-type"><primary>rclib_db_catalog_set_type</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_catalog_set_type           (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter><link linkend="RCLibDbCatalogType"><type>RCLibDbCatalogType</type></link> type</parameter>);</programlisting>
<para>
Set the type of the catalog pointed to by <link linkend="iter"><type>iter</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the iter to the catalog</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>the new type for the catalog</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-exit" role="function">
<title>rclib_db_exit ()</title>
<indexterm zone="rclib-db-exit"><primary>rclib_db_exit</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_exit                       ();</programlisting>
<para>
Unload D-Bus support module.
</para></refsect2>
<refsect2 id="rclib-db-get-catalog" role="function">
<title>rclib_db_get_catalog ()</title>
<indexterm zone="rclib-db-get-catalog"><primary>rclib_db_get_catalog</primary></indexterm>
<programlisting><link linkend="GSequence"><returnvalue>GSequence</returnvalue></link> *         rclib_db_get_catalog                ();</programlisting>
<para>
Get the catalog.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The catalog, NULL if the catalog does not exist.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-get-instance" role="function">
<title>rclib_db_get_instance ()</title>
<indexterm zone="rclib-db-get-instance"><primary>rclib_db_get_instance</primary></indexterm>
<programlisting><link linkend="GObject"><returnvalue>GObject</returnvalue></link> *           rclib_db_get_instance               ();</programlisting>
<para>
Get the running <link linkend="RCLibDb"><type>RCLibDb</type></link> instance.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The running instance.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-init" role="function">
<title>rclib_db_init ()</title>
<indexterm zone="rclib-db-init"><primary>rclib_db_init</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            rclib_db_init                       (<parameter>const <link linkend="gchar"><type>gchar</type></link> *file</parameter>);</programlisting>
<para>
Initialize the music library database.
</para><variablelist role="params">
<varlistentry><term><parameter>file</parameter>&#160;:</term>
<listitem><simpara>the file of the music library database to load</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>Whether the initialization succeeded.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-add-directory" role="function">
<title>rclib_db_playlist_add_directory ()</title>
<indexterm zone="rclib-db-playlist-add-directory"><primary>rclib_db_playlist_add_directory</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_playlist_add_directory     (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *insert_iter</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *dir</parameter>);</programlisting>
<para>
Add all music in the directory to the catalog pointed to by <link linkend="iter"><type>iter</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the catalog iter</simpara></listitem></varlistentry>
<varlistentry><term><parameter>insert_iter</parameter>&#160;:</term>
<listitem><simpara>insert the music before this iter</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dir</parameter>&#160;:</term>
<listitem><simpara>the directory path</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-add-m3u-file" role="function">
<title>rclib_db_playlist_add_m3u_file ()</title>
<indexterm zone="rclib-db-playlist-add-m3u-file"><primary>rclib_db_playlist_add_m3u_file</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_playlist_add_m3u_file      (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *insert_iter</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);</programlisting>
<para>
Load a m3u playlist file, and add all music inside to
the catalog pointed to by <link linkend="iter"><type>iter</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the catalog iter</simpara></listitem></varlistentry>
<varlistentry><term><parameter>insert_iter</parameter>&#160;:</term>
<listitem><simpara>insert the music before this iter</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>the path of the playlist file</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-add-music" role="function">
<title>rclib_db_playlist_add_music ()</title>
<indexterm zone="rclib-db-playlist-add-music"><primary>rclib_db_playlist_add_music</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_playlist_add_music         (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *insert_iter</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *uri</parameter>);</programlisting>
<para>
Add music to the music library by given catalog iter.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the catalog iter</simpara></listitem></varlistentry>
<varlistentry><term><parameter>insert_iter</parameter>&#160;:</term>
<listitem><simpara>insert the music before this iter</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara>the URI of the music</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-add-music-and-play" role="function">
<title>rclib_db_playlist_add_music_and_play ()</title>
<indexterm zone="rclib-db-playlist-add-music-and-play"><primary>rclib_db_playlist_add_music_and_play</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_playlist_add_music_and_play
                                                        (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *insert_iter</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *uri</parameter>);</programlisting>
<para>
Add music to the music library by given catalog iter, and then play it
if the add operation succeeds.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the catalog iter</simpara></listitem></varlistentry>
<varlistentry><term><parameter>insert_iter</parameter>&#160;:</term>
<listitem><simpara>insert the music before this iter</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara>the URI of the music</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-data-free" role="function">
<title>rclib_db_playlist_data_free ()</title>
<indexterm zone="rclib-db-playlist-data-free"><primary>rclib_db_playlist_data_free</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_playlist_data_free         (<parameter><link linkend="RCLibDbPlaylistData"><type>RCLibDbPlaylistData</type></link> *data</parameter>);</programlisting>
<para>
Free the <link linkend="RCLibDbPlaylistData"><type>RCLibDbPlaylistData</type></link> structure.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the data to free</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-data-new" role="function">
<title>rclib_db_playlist_data_new ()</title>
<indexterm zone="rclib-db-playlist-data-new"><primary>rclib_db_playlist_data_new</primary></indexterm>
<programlisting><link linkend="RCLibDbPlaylistData"><returnvalue>RCLibDbPlaylistData</returnvalue></link> * rclib_db_playlist_data_new        ();</programlisting>
<para>
Create a new empty <link linkend="RCLibDbPlaylistData"><type>RCLibDbPlaylistData</type></link> structure,
and set the reference count to 1.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The new empty allocated <link linkend="RCLibPlaylistData"><type>RCLibPlaylistData</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-data-ref" role="function">
<title>rclib_db_playlist_data_ref ()</title>
<indexterm zone="rclib-db-playlist-data-ref"><primary>rclib_db_playlist_data_ref</primary></indexterm>
<programlisting><link linkend="RCLibDbPlaylistData"><returnvalue>RCLibDbPlaylistData</returnvalue></link> * rclib_db_playlist_data_ref        (<parameter><link linkend="RCLibDbPlaylistData"><type>RCLibDbPlaylistData</type></link> *data</parameter>);</programlisting>
<para>
Increase the reference of <link linkend="RCLibDbPlaylistData"><type>RCLibDbPlaylistData</type></link> by 1.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="RCLibDbPlaylistData"><type>RCLibDbPlaylistData</type></link> structure</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The <link linkend="RCLibDbPlaylistData"><type>RCLibDbPlaylistData</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-data-unref" role="function">
<title>rclib_db_playlist_data_unref ()</title>
<indexterm zone="rclib-db-playlist-data-unref"><primary>rclib_db_playlist_data_unref</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_playlist_data_unref        (<parameter><link linkend="RCLibDbPlaylistData"><type>RCLibDbPlaylistData</type></link> *data</parameter>);</programlisting>
<para>
Decrease the reference of <link linkend="RCLibDbPlaylistData"><type>RCLibDbPlaylistData</type></link> by 1.
If the reference down to zero, the structure will be freed.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="RCLibDbPlaylistData"><type>RCLibDbPlaylistData</type></link> structure</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The <link linkend="RCLibDbPlaylistData"><type>RCLibDbPlaylistData</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-delete" role="function">
<title>rclib_db_playlist_delete ()</title>
<indexterm zone="rclib-db-playlist-delete"><primary>rclib_db_playlist_delete</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_playlist_delete            (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>);</programlisting>
<para>
Delete the playlist data pointed to by <link linkend="iter"><type>iter</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the iter to the playlist data</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-export-all-m3u-files" role="function">
<title>rclib_db_playlist_export_all_m3u_files ()</title>
<indexterm zone="rclib-db-playlist-export-all-m3u-files"><primary>rclib_db_playlist_export_all_m3u_files</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            rclib_db_playlist_export_all_m3u_files
                                                        (<parameter>const <link linkend="gchar"><type>gchar</type></link> *dir</parameter>);</programlisting>
<para>
Export all playlists in the catalog to playlist files.
</para><variablelist role="params">
<varlistentry><term><parameter>dir</parameter>&#160;:</term>
<listitem><simpara>the directory to save playlist files</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>Whether the operation succeeded.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-export-m3u-file" role="function">
<title>rclib_db_playlist_export_m3u_file ()</title>
<indexterm zone="rclib-db-playlist-export-m3u-file"><primary>rclib_db_playlist_export_m3u_file</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            rclib_db_playlist_export_m3u_file   (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *sfilename</parameter>);</programlisting>
<para>
Export the catalog pointed to by <link linkend="iter"><type>iter</type></link> to a new playlist file.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the catalog iter</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sfilename</parameter>&#160;:</term>
<listitem><simpara>the new playlist file path</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>Whether the operation succeeded.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-get-album-bind" role="function">
<title>rclib_db_playlist_get_album_bind ()</title>
<indexterm zone="rclib-db-playlist-get-album-bind"><primary>rclib_db_playlist_get_album_bind</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       rclib_db_playlist_get_album_bind    (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>);</programlisting>
<para>
Get the album image file bound to the music in the playlist pointed
to by <link linkend="iter"><type>iter</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the iter to the playlist</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The album image file path.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-get-lyric-bind" role="function">
<title>rclib_db_playlist_get_lyric_bind ()</title>
<indexterm zone="rclib-db-playlist-get-lyric-bind"><primary>rclib_db_playlist_get_lyric_bind</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       rclib_db_playlist_get_lyric_bind    (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>);</programlisting>
<para>
Get the lyric file bound to the music in the playlist pointed
to by <link linkend="iter"><type>iter</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the iter to the playlist</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The lyric file path.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-get-lyric-secondary-bind" role="function">
<title>rclib_db_playlist_get_lyric_secondary_bind ()</title>
<indexterm zone="rclib-db-playlist-get-lyric-secondary-bind"><primary>rclib_db_playlist_get_lyric_secondary_bind</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       rclib_db_playlist_get_lyric_secondary_bind
                                                        (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>);</programlisting>
<para>
Get the secondary lyric file bound to the music in the playlist pointed
to by <link linkend="iter"><type>iter</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the iter to the playlist</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The lyric file path.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-import-cancel" role="function">
<title>rclib_db_playlist_import_cancel ()</title>
<indexterm zone="rclib-db-playlist-import-cancel"><primary>rclib_db_playlist_import_cancel</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_playlist_import_cancel     ();</programlisting>
<para>
Cancel all remaining import jobs in the queue.
</para></refsect2>
<refsect2 id="rclib-db-playlist-import-queue-get-length" role="function">
<title>rclib_db_playlist_import_queue_get_length ()</title>
<indexterm zone="rclib-db-playlist-import-queue-get-length"><primary>rclib_db_playlist_import_queue_get_length</primary></indexterm>
<programlisting><link linkend="gint"><returnvalue>gint</returnvalue></link>                rclib_db_playlist_import_queue_get_length
                                                        ();</programlisting>
<para>
Get the number of remaining jobs in the import queue.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The number of remaining jobs.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-move-to-another-catalog" role="function">
<title>rclib_db_playlist_move_to_another_catalog ()</title>
<indexterm zone="rclib-db-playlist-move-to-another-catalog"><primary>rclib_db_playlist_move_to_another_catalog</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_playlist_move_to_another_catalog
                                                        (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> **iters</parameter>,
                                                         <parameter><link linkend="guint"><type>guint</type></link> num</parameter>,
                                                         <parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *catalog_iter</parameter>);</programlisting>
<para>
Move the playlist data pointed to by <link linkend="iters"><type>iters</type></link> to another catalog
pointed to by <link linkend="catalog-iter"><type>catalog_iter</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>iters</parameter>&#160;:</term>
<listitem><simpara>an iter array</simpara></listitem></varlistentry>
<varlistentry><term><parameter>num</parameter>&#160;:</term>
<listitem><simpara>the size of the iter array</simpara></listitem></varlistentry>
<varlistentry><term><parameter>catalog_iter</parameter>&#160;:</term>
<listitem><simpara>the iter for the catalog</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-refresh" role="function">
<title>rclib_db_playlist_refresh ()</title>
<indexterm zone="rclib-db-playlist-refresh"><primary>rclib_db_playlist_refresh</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_playlist_refresh           (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>);</programlisting>
<para>
Refresh the metadata of the music in the playlist pointed to
by the given catalog <link linkend="iter"><type>iter</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the catalog iter</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-refresh-cancel" role="function">
<title>rclib_db_playlist_refresh_cancel ()</title>
<indexterm zone="rclib-db-playlist-refresh-cancel"><primary>rclib_db_playlist_refresh_cancel</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_playlist_refresh_cancel    ();</programlisting>
<para>
Cancel all remaining refresh jobs in the queue.
</para></refsect2>
<refsect2 id="rclib-db-playlist-refresh-queue-get-length" role="function">
<title>rclib_db_playlist_refresh_queue_get_length ()</title>
<indexterm zone="rclib-db-playlist-refresh-queue-get-length"><primary>rclib_db_playlist_refresh_queue_get_length</primary></indexterm>
<programlisting><link linkend="gint"><returnvalue>gint</returnvalue></link>                rclib_db_playlist_refresh_queue_get_length
                                                        ();</programlisting>
<para>
Get the number of remaining jobs in the refresh queue.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The number of remaining jobs.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-reorder" role="function">
<title>rclib_db_playlist_reorder ()</title>
<indexterm zone="rclib-db-playlist-reorder"><primary>rclib_db_playlist_reorder</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_playlist_reorder           (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> *new_order</parameter>);</programlisting>
<para>
Reorder the playlist to follow the order indicated by <parameter>new_order</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the iter pointed to catalog</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_order</parameter>&#160;:</term>
<listitem><simpara>an array of integers mapping the new position of
each child to its old position before the re-ordering,
i.e. <parameter>new_order</parameter><literal>[newpos] = oldpos</literal>. <emphasis role="annotation">[<acronym>array</acronym>]</emphasis></simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-set-album-bind" role="function">
<title>rclib_db_playlist_set_album_bind ()</title>
<indexterm zone="rclib-db-playlist-set-album-bind"><primary>rclib_db_playlist_set_album_bind</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_playlist_set_album_bind    (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);</programlisting>
<para>
Bind the album image file to the music in the playlist pointed
to by <link linkend="iter"><type>iter</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the iter to the playlist</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>the path of the album image file</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-set-lyric-bind" role="function">
<title>rclib_db_playlist_set_lyric_bind ()</title>
<indexterm zone="rclib-db-playlist-set-lyric-bind"><primary>rclib_db_playlist_set_lyric_bind</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_playlist_set_lyric_bind    (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);</programlisting>
<para>
Bind the lyric file to the music in the playlist pointed to by <link linkend="iter"><type>iter</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the iter to the playlist</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>the path of the lyric file</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-set-lyric-secondary-bind" role="function">
<title>rclib_db_playlist_set_lyric_secondary_bind ()</title>
<indexterm zone="rclib-db-playlist-set-lyric-secondary-bind"><primary>rclib_db_playlist_set_lyric_secondary_bind</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_playlist_set_lyric_secondary_bind
                                                        (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);</programlisting>
<para>
Bind the secondary lyric file to the music in the playlist pointed
to by <link linkend="iter"><type>iter</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the iter to the playlist</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>the path of the lyric file</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-set-rating" role="function">
<title>rclib_db_playlist_set_rating ()</title>
<indexterm zone="rclib-db-playlist-set-rating"><primary>rclib_db_playlist_set_rating</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_playlist_set_rating        (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> rating</parameter>);</programlisting>
<para>
Set the rating in the playlist pointed to by <link linkend="iter"><type>iter</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the iter to the playlist</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rating</parameter>&#160;:</term>
<listitem><simpara>the new rating to set</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-set-type" role="function">
<title>rclib_db_playlist_set_type ()</title>
<indexterm zone="rclib-db-playlist-set-type"><primary>rclib_db_playlist_set_type</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_playlist_set_type          (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter><link linkend="RCLibDbPlaylistType"><type>RCLibDbPlaylistType</type></link> type</parameter>);</programlisting>
<para>
Set the type information in the playlist pointed to by <link linkend="iter"><type>iter</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the iter to the playlist</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>the new type to set</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-sync" role="function">
<title>rclib_db_playlist_sync ()</title>
<indexterm zone="rclib-db-playlist-sync"><primary>rclib_db_playlist_sync</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            rclib_db_playlist_sync              ();</programlisting>
</refsect2>
<refsect2 id="rclib-db-playlist-update-length" role="function">
<title>rclib_db_playlist_update_length ()</title>
<indexterm zone="rclib-db-playlist-update-length"><primary>rclib_db_playlist_update_length</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_playlist_update_length     (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter><link linkend="gint64"><type>gint64</type></link> length</parameter>);</programlisting>
<para>
Update the length (duration) information in the playlist pointed to
by <link linkend="iter"><type>iter</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the iter to the playlist</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara>the new length (duration)</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-playlist-update-metadata" role="function">
<title>rclib_db_playlist_update_metadata ()</title>
<indexterm zone="rclib-db-playlist-update-metadata"><primary>rclib_db_playlist_update_metadata</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_playlist_update_metadata   (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>,
                                                         <parameter>const <link linkend="RCLibDbPlaylistData"><type>RCLibDbPlaylistData</type></link> *data</parameter>);</programlisting>
<para>
Update the metadata in the playlist pointed to by <link linkend="iter"><type>iter</type></link>.
Title, artist, album, file type, track number, year information
will be updated.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the iter to the playlist</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the new metadata</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-signal-connect" role="function">
<title>rclib_db_signal_connect ()</title>
<indexterm zone="rclib-db-signal-connect"><primary>rclib_db_signal_connect</primary></indexterm>
<programlisting><link linkend="gulong"><returnvalue>gulong</returnvalue></link>              rclib_db_signal_connect             (<parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>,
                                                         <parameter><link linkend="GCallback"><type>GCallback</type></link> callback</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> data</parameter>);</programlisting>
<para>
Connect the GCallback function to the given signal for the running
instance of <link linkend="RCLibDb"><type>RCLibDb</type></link> object.
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>the name of the signal</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara>the the <link linkend="GCallback"><type>GCallback</type></link> to connect</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the user data</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The handler ID.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-db-signal-disconnect" role="function">
<title>rclib_db_signal_disconnect ()</title>
<indexterm zone="rclib-db-signal-disconnect"><primary>rclib_db_signal_disconnect</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_db_signal_disconnect          (<parameter><link linkend="gulong"><type>gulong</type></link> handler_id</parameter>);</programlisting>
<para>
Disconnects a handler from the running <link linkend="RCLibDb"><type>RCLibDb</type></link> instance so it will
not be called during any future or currently ongoing emissions
of the signal it has been connected to. The <link linkend="handler-id"><type>handler_id</type></link> becomes
invalid and may be reused.
</para><variablelist role="params">
<varlistentry><term><parameter>handler_id</parameter>&#160;:</term>
<listitem><simpara>handler id of the handler to be disconnected</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 id="RCLibDb.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="RCLibDb-catalog-added" role="signal"><title>The <literal>&quot;catalog-added&quot;</literal> signal</title>
<indexterm zone="RCLibDb-catalog-added"><primary>RCLibDb::catalog-added</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="RCLibDb"><type>RCLibDb</type></link> *db,
                                                        <link linkend="gpointer"><type>gpointer</type></link> iter,
                                                        <link linkend="gpointer"><type>gpointer</type></link> user_data)      : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link></programlisting>
<para>
The ::catalog-added signal is emitted when a new item has been
added to the catalog.
</para><variablelist role="params">
<varlistentry><term><parameter>db</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="RCLibDb"><type>RCLibDb</type></link> that received the signal</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="iter"><type>iter</type></link> pointed to the added item</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="RCLibDb-catalog-changed" role="signal"><title>The <literal>&quot;catalog-changed&quot;</literal> signal</title>
<indexterm zone="RCLibDb-catalog-changed"><primary>RCLibDb::catalog-changed</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="RCLibDb"><type>RCLibDb</type></link> *db,
                                                        <link linkend="gpointer"><type>gpointer</type></link> iter,
                                                        <link linkend="gpointer"><type>gpointer</type></link> user_data)      : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link></programlisting>
<para>
The ::catalog-changed signal is emitted when an item has been
changed in the catalog.
</para><variablelist role="params">
<varlistentry><term><parameter>db</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="RCLibDb"><type>RCLibDb</type></link> that received the signal</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="iter"><type>iter</type></link> pointed to the changed item</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="RCLibDb-catalog-delete" role="signal"><title>The <literal>&quot;catalog-delete&quot;</literal> signal</title>
<indexterm zone="RCLibDb-catalog-delete"><primary>RCLibDb::catalog-delete</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="RCLibDb"><type>RCLibDb</type></link> *db,
                                                        <link linkend="gpointer"><type>gpointer</type></link> iter,
                                                        <link linkend="gpointer"><type>gpointer</type></link> user_data)      : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link></programlisting>
<para>
The ::catalog-delete signal is emitted before an item in the catalog
is about to be deleted.
</para><variablelist role="params">
<varlistentry><term><parameter>db</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="RCLibDb"><type>RCLibDb</type></link> that received the signal</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="iter"><type>iter</type></link> pointed to the item which is about to be deleted</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="RCLibDb-catalog-reordered" role="signal"><title>The <literal>&quot;catalog-reordered&quot;</literal> signal</title>
<indexterm zone="RCLibDb-catalog-reordered"><primary>RCLibDb::catalog-reordered</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="RCLibDb"><type>RCLibDb</type></link> *db,
                                                        <link linkend="gpointer"><type>gpointer</type></link> new_order,
                                                        <link linkend="gpointer"><type>gpointer</type></link> user_data)      : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link></programlisting>
<para>
The ::catalog-reordered signal is emitted when the catalog items have
been reordered.
</para><variablelist role="params">
<varlistentry><term><parameter>db</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="RCLibDb"><type>RCLibDb</type></link> that received the signal</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_order</parameter>&#160;:</term>
<listitem><simpara>an array of integers mapping the current position of each
catalog item to its old position before the re-ordering,
i.e. <parameter>new_order</parameter><literal>[newpos] = oldpos</literal></simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="RCLibDb-import-updated" role="signal"><title>The <literal>&quot;import-updated&quot;</literal> signal</title>
<indexterm zone="RCLibDb-import-updated"><primary>RCLibDb::import-updated</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="RCLibDb"><type>RCLibDb</type></link> *db,
                                                        <link linkend="gint"><type>gint</type></link>     remaining,
                                                        <link linkend="gpointer"><type>gpointer</type></link> user_data)      : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link></programlisting>
<para>
The ::import-updated signal is emitted when a job in the import
queue have been processed.
</para><variablelist role="params">
<varlistentry><term><parameter>db</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="RCLibDb"><type>RCLibDb</type></link> that received the signal</simpara></listitem></varlistentry>
<varlistentry><term><parameter>remaining</parameter>&#160;:</term>
<listitem><simpara>the number of remaing jobs in current import queue</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="RCLibDb-playlist-added" role="signal"><title>The <literal>&quot;playlist-added&quot;</literal> signal</title>
<indexterm zone="RCLibDb-playlist-added"><primary>RCLibDb::playlist-added</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="RCLibDb"><type>RCLibDb</type></link> *db,
                                                        <link linkend="gpointer"><type>gpointer</type></link> iter,
                                                        <link linkend="gpointer"><type>gpointer</type></link> user_data)      : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link></programlisting>
<para>
The ::playlist-added signal is emitted when a new item has been
added to the playlist.
</para><variablelist role="params">
<varlistentry><term><parameter>db</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="RCLibDb"><type>RCLibDb</type></link> that received the signal</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="iter"><type>iter</type></link> pointed to the added item</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="RCLibDb-playlist-changed" role="signal"><title>The <literal>&quot;playlist-changed&quot;</literal> signal</title>
<indexterm zone="RCLibDb-playlist-changed"><primary>RCLibDb::playlist-changed</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="RCLibDb"><type>RCLibDb</type></link> *db,
                                                        <link linkend="gpointer"><type>gpointer</type></link> iter,
                                                        <link linkend="gpointer"><type>gpointer</type></link> user_data)      : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link></programlisting>
<para>
The ::playlist-changed signal is emitted when an item has been
changed in the playlist.
</para><variablelist role="params">
<varlistentry><term><parameter>db</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="RCLibDb"><type>RCLibDb</type></link> that received the signal</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="iter"><type>iter</type></link> pointed to the changed item</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="RCLibDb-playlist-delete" role="signal"><title>The <literal>&quot;playlist-delete&quot;</literal> signal</title>
<indexterm zone="RCLibDb-playlist-delete"><primary>RCLibDb::playlist-delete</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="RCLibDb"><type>RCLibDb</type></link> *db,
                                                        <link linkend="gpointer"><type>gpointer</type></link> iter,
                                                        <link linkend="gpointer"><type>gpointer</type></link> user_data)      : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link></programlisting>
<para>
The ::playlist-delete signal is emitted before an item in the playlist
is about to be deleted.
</para><variablelist role="params">
<varlistentry><term><parameter>db</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="RCLibDb"><type>RCLibDb</type></link> that received the signal</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="iter"><type>iter</type></link> pointed to the item which is about to be deleted</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="RCLibDb-playlist-reordered" role="signal"><title>The <literal>&quot;playlist-reordered&quot;</literal> signal</title>
<indexterm zone="RCLibDb-playlist-reordered"><primary>RCLibDb::playlist-reordered</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="RCLibDb"><type>RCLibDb</type></link> *db,
                                                        <link linkend="gpointer"><type>gpointer</type></link> iter,
                                                        <link linkend="gpointer"><type>gpointer</type></link> new_order,
                                                        <link linkend="gpointer"><type>gpointer</type></link> user_data)      : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link></programlisting>
<para>
The ::playlist-reordered signal is emitted when the catalog items have
been reordered.
</para><variablelist role="params">
<varlistentry><term><parameter>db</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="RCLibDb"><type>RCLibDb</type></link> that received the signal</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="iter"><type>iter</type></link> pointed to the catalog item which contains the
reordered playlist items</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_order</parameter>&#160;:</term>
<listitem><simpara>an array of integers mapping the current position of each
playlist item to its old position before the re-ordering,
i.e. <parameter>new_order</parameter><literal>[newpos] = oldpos</literal></simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="RCLibDb-refresh-updated" role="signal"><title>The <literal>&quot;refresh-updated&quot;</literal> signal</title>
<indexterm zone="RCLibDb-refresh-updated"><primary>RCLibDb::refresh-updated</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="RCLibDb"><type>RCLibDb</type></link> *db,
                                                        <link linkend="gint"><type>gint</type></link>     remaining,
                                                        <link linkend="gpointer"><type>gpointer</type></link> user_data)      : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link></programlisting>
<para>
The ::refresh-updated signal is emitted when a job in the refresh
queue have been processed.
</para><variablelist role="params">
<varlistentry><term><parameter>db</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="RCLibDb"><type>RCLibDb</type></link> that received the signal</simpara></listitem></varlistentry>
<varlistentry><term><parameter>remaining</parameter>&#160;:</term>
<listitem><simpara>the number of remaing jobs in current refresh queue</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>

</refentry>
