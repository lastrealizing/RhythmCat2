<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
]>
<refentry id="RCLibPlayer">
<refmeta>
<refentrytitle role="top_of_page" id="RCLibPlayer.top_of_page">RCLibPlayer</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  LIBRHYTHMCAT Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>RCLibPlayer</refname>
<refpurpose>The player scheduler</refpurpose>
</refnamediv>

<refsynopsisdiv id="RCLibPlayer.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
#include &lt;rclib-player.h&gt;

#define             <link linkend="RCLIB-PLAYER-TYPE:CAPS">RCLIB_PLAYER_TYPE</link>
struct              <link linkend="RCLibPlayer-struct">RCLibPlayer</link>;
struct              <link linkend="RCLibPlayerClass">RCLibPlayerClass</link>;
enum                <link linkend="RCLibPlayerRandomMode">RCLibPlayerRandomMode</link>;
enum                <link linkend="RCLibPlayerRepeatMode">RCLibPlayerRepeatMode</link>;
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-player-init">rclib_player_init</link>                   ();
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-player-exit">rclib_player_exit</link>                   ();
<link linkend="GObject"><returnvalue>GObject</returnvalue></link> *           <link linkend="rclib-player-get-instance">rclib_player_get_instance</link>           ();
<link linkend="gulong"><returnvalue>gulong</returnvalue></link>              <link linkend="rclib-player-signal-connect">rclib_player_signal_connect</link>         (<parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>,
                                                         <parameter><link linkend="GCallback"><type>GCallback</type></link> callback</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> data</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-player-signal-disconnect">rclib_player_signal_disconnect</link>      (<parameter><link linkend="gulong"><type>gulong</type></link> handler_id</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-player-play-db">rclib_player_play_db</link>                (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-player-play-uri">rclib_player_play_uri</link>               (<parameter>const <link linkend="gchar"><type>gchar</type></link> *uri</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-player-play-prev">rclib_player_play_prev</link>              (<parameter><link linkend="gboolean"><type>gboolean</type></link> jump</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> repeat</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> loop</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-player-play-next">rclib_player_play_next</link>              (<parameter><link linkend="gboolean"><type>gboolean</type></link> jump</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> repeat</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> loop</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-player-set-repeat-mode">rclib_player_set_repeat_mode</link>        (<parameter><link linkend="RCLibPlayerRepeatMode"><type>RCLibPlayerRepeatMode</type></link> mode</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-player-set-random-mode">rclib_player_set_random_mode</link>        (<parameter><link linkend="RCLibPlayerRandomMode"><type>RCLibPlayerRandomMode</type></link> mode</parameter>);
<link linkend="RCLibPlayerRepeatMode"><returnvalue>RCLibPlayerRepeatMode</returnvalue></link> <link linkend="rclib-player-get-repeat-mode">rclib_player_get_repeat_mode</link>      ();
<link linkend="RCLibPlayerRandomMode"><returnvalue>RCLibPlayerRandomMode</returnvalue></link> <link linkend="rclib-player-get-random-mode">rclib_player_get_random_mode</link>      ();
</synopsis>
</refsynopsisdiv>
<refsect1 id="RCLibPlayer.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----RCLibPlayer
</synopsis>
</refsect1>
<refsect1 id="RCLibPlayer.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="RCLibPlayer-random-mode-changed">random-mode-changed</link>&quot;                            : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link>
  &quot;<link linkend="RCLibPlayer-repeat-mode-changed">repeat-mode-changed</link>&quot;                            : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link>
</synopsis>
</refsect1>

<refsect1 id="RCLibPlayer.description" role="desc">
<title role="desc.title">Description</title>
<para>
The <link linkend="RCLibPlayer"><type>RCLibPlayer</type></link> is a class which schedules the player, like sequential
playing, repeat playing, and random playing. The playing mode can be set
easily by the given API.
</para>
</refsect1>
<refsect1 id="RCLibPlayer.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="RCLIB-PLAYER-TYPE:CAPS" role="macro">
<title>RCLIB_PLAYER_TYPE</title>
<indexterm zone="RCLIB-PLAYER-TYPE:CAPS"><primary>RCLIB_PLAYER_TYPE</primary></indexterm>
<programlisting>#define RCLIB_PLAYER_TYPE (rclib_player_get_type())
</programlisting>
</refsect2>
<refsect2 id="RCLibPlayer-struct" role="struct">
<title>struct RCLibPlayer</title>
<indexterm zone="RCLibPlayer-struct"><primary>RCLibPlayer</primary></indexterm>
<programlisting>struct RCLibPlayer;</programlisting>
<para>
The advanced player scheduler. The contents of the <link linkend="RCLibPlayer"><type>RCLibPlayer</type></link> structure
are private and should only be accessed via the provided API.
</para></refsect2>
<refsect2 id="RCLibPlayerClass" role="struct">
<title>struct RCLibPlayerClass</title>
<indexterm zone="RCLibPlayerClass"><primary>RCLibPlayerClass</primary></indexterm>
<programlisting>struct RCLibPlayerClass {
};
</programlisting>
<para>
<link linkend="RCLibPlayer"><type>RCLibPlayer</type></link> class.
</para></refsect2>
<refsect2 id="RCLibPlayerRandomMode" role="enum">
<title>enum RCLibPlayerRandomMode</title>
<indexterm zone="RCLibPlayerRandomMode"><primary>RCLibPlayerRandomMode</primary></indexterm>
<programlisting>typedef enum {
    RCLIB_PLAYER_RANDOM_NONE,
    RCLIB_PLAYER_RANDOM_SINGLE,
    RCLIB_PlAYER_RANDOM_ALL
} RCLibPlayerRandomMode;
</programlisting>
<para>
The enum type for random playing mode type.
</para><variablelist role="enum">
<varlistentry id="RCLIB-PLAYER-RANDOM-NONE:CAPS" role="constant">
<term><literal>RCLIB_PLAYER_RANDOM_NONE</literal></term>
<listitem><simpara>no random playing 
</simpara></listitem>
</varlistentry>
<varlistentry id="RCLIB-PLAYER-RANDOM-SINGLE:CAPS" role="constant">
<term><literal>RCLIB_PLAYER_RANDOM_SINGLE</literal></term>
<listitem><simpara>random playing in current playlist
</simpara></listitem>
</varlistentry>
<varlistentry id="RCLIB-PlAYER-RANDOM-ALL" role="constant">
<term><literal>RCLIB_PlAYER_RANDOM_ALL</literal></term>
<listitem><simpara>random playing in all playlists
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="RCLibPlayerRepeatMode" role="enum">
<title>enum RCLibPlayerRepeatMode</title>
<indexterm zone="RCLibPlayerRepeatMode"><primary>RCLibPlayerRepeatMode</primary></indexterm>
<programlisting>typedef enum {
    RCLIB_PLAYER_REPEAT_NONE,
    RCLIB_PLAYER_REPEAT_SINGLE,
    RCLIB_PLAYER_REPEAT_LIST,
    RCLIB_PLAYER_REPEAT_ALL
} RCLibPlayerRepeatMode;
</programlisting>
<para>
The enum type for repeat playing mode type.
</para><variablelist role="enum">
<varlistentry id="RCLIB-PLAYER-REPEAT-NONE:CAPS" role="constant">
<term><literal>RCLIB_PLAYER_REPEAT_NONE</literal></term>
<listitem><simpara>no repeat
</simpara></listitem>
</varlistentry>
<varlistentry id="RCLIB-PLAYER-REPEAT-SINGLE:CAPS" role="constant">
<term><literal>RCLIB_PLAYER_REPEAT_SINGLE</literal></term>
<listitem><simpara>repeat playing current music
</simpara></listitem>
</varlistentry>
<varlistentry id="RCLIB-PLAYER-REPEAT-LIST:CAPS" role="constant">
<term><literal>RCLIB_PLAYER_REPEAT_LIST</literal></term>
<listitem><simpara>repeat playing music in current playlist
</simpara></listitem>
</varlistentry>
<varlistentry id="RCLIB-PLAYER-REPEAT-ALL:CAPS" role="constant">
<term><literal>RCLIB_PLAYER_REPEAT_ALL</literal></term>
<listitem><simpara>repeat playing music in all playlists
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-player-init" role="function">
<title>rclib_player_init ()</title>
<indexterm zone="rclib-player-init"><primary>rclib_player_init</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_player_init                   ();</programlisting>
<para>
Initialize the player scheduler.
</para></refsect2>
<refsect2 id="rclib-player-exit" role="function">
<title>rclib_player_exit ()</title>
<indexterm zone="rclib-player-exit"><primary>rclib_player_exit</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_player_exit                   ();</programlisting>
<para>
Unload the running player scheduler instance.
</para></refsect2>
<refsect2 id="rclib-player-get-instance" role="function">
<title>rclib_player_get_instance ()</title>
<indexterm zone="rclib-player-get-instance"><primary>rclib_player_get_instance</primary></indexterm>
<programlisting><link linkend="GObject"><returnvalue>GObject</returnvalue></link> *           rclib_player_get_instance           ();</programlisting>
<para>
Get the running <link linkend="RCLibPlayer"><type>RCLibPlayer</type></link> instance.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The running instance.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-player-signal-connect" role="function">
<title>rclib_player_signal_connect ()</title>
<indexterm zone="rclib-player-signal-connect"><primary>rclib_player_signal_connect</primary></indexterm>
<programlisting><link linkend="gulong"><returnvalue>gulong</returnvalue></link>              rclib_player_signal_connect         (<parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>,
                                                         <parameter><link linkend="GCallback"><type>GCallback</type></link> callback</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> data</parameter>);</programlisting>
<para>
Connect the GCallback function to the given signal for the running
instance of <link linkend="RCLibPlayer"><type>RCLibPlayer</type></link> object.
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>the name of the signal</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara>the the <link linkend="GCallback"><type>GCallback</type></link> to connect</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the user data</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The handler ID.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-player-signal-disconnect" role="function">
<title>rclib_player_signal_disconnect ()</title>
<indexterm zone="rclib-player-signal-disconnect"><primary>rclib_player_signal_disconnect</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_player_signal_disconnect      (<parameter><link linkend="gulong"><type>gulong</type></link> handler_id</parameter>);</programlisting>
<para>
Disconnects a handler from the running <link linkend="RCLibPlayer"><type>RCLibPlayer</type></link> instance so it
will not be called during any future or currently ongoing emissions
of the signal it has been connected to. The <link linkend="handler-id"><type>handler_id</type></link> becomes
invalid and may be reused.
</para><variablelist role="params">
<varlistentry><term><parameter>handler_id</parameter>&#160;:</term>
<listitem><simpara>handler id of the handler to be disconnected</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-player-play-db" role="function">
<title>rclib_player_play_db ()</title>
<indexterm zone="rclib-player-play-db"><primary>rclib_player_play_db</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_player_play_db                (<parameter><link linkend="GSequenceIter"><type>GSequenceIter</type></link> *iter</parameter>);</programlisting>
<para>
Play the iter to the playlist in the music database.
</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&#160;:</term>
<listitem><simpara>the iter to the playlist</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-player-play-uri" role="function">
<title>rclib_player_play_uri ()</title>
<indexterm zone="rclib-player-play-uri"><primary>rclib_player_play_uri</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_player_play_uri               (<parameter>const <link linkend="gchar"><type>gchar</type></link> *uri</parameter>);</programlisting>
</refsect2>
<refsect2 id="rclib-player-play-prev" role="function">
<title>rclib_player_play_prev ()</title>
<indexterm zone="rclib-player-play-prev"><primary>rclib_player_play_prev</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_player_play_prev              (<parameter><link linkend="gboolean"><type>gboolean</type></link> jump</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> repeat</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> loop</parameter>);</programlisting>
<para>
Play the previous music.
</para><variablelist role="params">
<varlistentry><term><parameter>jump</parameter>&#160;:</term>
<listitem><simpara>whether the player should be jump to the previous playlist
if the playing music is the first one in current playlist</simpara></listitem></varlistentry>
<varlistentry><term><parameter>repeat</parameter>&#160;:</term>
<listitem><simpara>whether repeat playing the current music if there is no
previous one</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara>whether the player should be jump to the last playlist
if the playing one is the first</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-player-play-next" role="function">
<title>rclib_player_play_next ()</title>
<indexterm zone="rclib-player-play-next"><primary>rclib_player_play_next</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_player_play_next              (<parameter><link linkend="gboolean"><type>gboolean</type></link> jump</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> repeat</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> loop</parameter>);</programlisting>
<para>
Play the next music.
</para><variablelist role="params">
<varlistentry><term><parameter>jump</parameter>&#160;:</term>
<listitem><simpara>whether the player should be jump to the next playlist
if the playing music is the last one in current playlist</simpara></listitem></varlistentry>
<varlistentry><term><parameter>repeat</parameter>&#160;:</term>
<listitem><simpara>whether repeat playing the current music if there is no
next one</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara>whether the player should be jump to the first playlist
if the playing one is the last</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-player-set-repeat-mode" role="function">
<title>rclib_player_set_repeat_mode ()</title>
<indexterm zone="rclib-player-set-repeat-mode"><primary>rclib_player_set_repeat_mode</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_player_set_repeat_mode        (<parameter><link linkend="RCLibPlayerRepeatMode"><type>RCLibPlayerRepeatMode</type></link> mode</parameter>);</programlisting>
<para>
Set the repeat mode for the player.
</para><variablelist role="params">
<varlistentry><term><parameter>mode</parameter>&#160;:</term>
<listitem><simpara>the new repeat mode to set</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-player-set-random-mode" role="function">
<title>rclib_player_set_random_mode ()</title>
<indexterm zone="rclib-player-set-random-mode"><primary>rclib_player_set_random_mode</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_player_set_random_mode        (<parameter><link linkend="RCLibPlayerRandomMode"><type>RCLibPlayerRandomMode</type></link> mode</parameter>);</programlisting>
<para>
Set the random mode for the player.
</para><variablelist role="params">
<varlistentry><term><parameter>mode</parameter>&#160;:</term>
<listitem><simpara>the new random mode to set</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-player-get-repeat-mode" role="function">
<title>rclib_player_get_repeat_mode ()</title>
<indexterm zone="rclib-player-get-repeat-mode"><primary>rclib_player_get_repeat_mode</primary></indexterm>
<programlisting><link linkend="RCLibPlayerRepeatMode"><returnvalue>RCLibPlayerRepeatMode</returnvalue></link> rclib_player_get_repeat_mode      ();</programlisting>
<para>
Get the repeat mode using now in the player.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The repeat mode.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-player-get-random-mode" role="function">
<title>rclib_player_get_random_mode ()</title>
<indexterm zone="rclib-player-get-random-mode"><primary>rclib_player_get_random_mode</primary></indexterm>
<programlisting><link linkend="RCLibPlayerRandomMode"><returnvalue>RCLibPlayerRandomMode</returnvalue></link> rclib_player_get_random_mode      ();</programlisting>
<para>
Get the random mode using now in the player.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The random mode.</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 id="RCLibPlayer.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="RCLibPlayer-random-mode-changed" role="signal"><title>The <literal>&quot;random-mode-changed&quot;</literal> signal</title>
<indexterm zone="RCLibPlayer-random-mode-changed"><primary>RCLibPlayer::random-mode-changed</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="RCLibPlayer"><type>RCLibPlayer</type></link> *player,
                                                        <link linkend="guint"><type>guint</type></link>        mode,
                                                        <link linkend="gpointer"><type>gpointer</type></link>     user_data)      : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link></programlisting>
<para>
The ::random-mode-changed signal is emitted when a new random playing
mode has been set.
</para><variablelist role="params">
<varlistentry><term><parameter>player</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="RCLibPlayer"><type>RCLibPlayer</type></link> that received the signal</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mode</parameter>&#160;:</term>
<listitem><simpara>the new random mode</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="RCLibPlayer-repeat-mode-changed" role="signal"><title>The <literal>&quot;repeat-mode-changed&quot;</literal> signal</title>
<indexterm zone="RCLibPlayer-repeat-mode-changed"><primary>RCLibPlayer::repeat-mode-changed</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="RCLibPlayer"><type>RCLibPlayer</type></link> *player,
                                                        <link linkend="guint"><type>guint</type></link>        mode,
                                                        <link linkend="gpointer"><type>gpointer</type></link>     user_data)      : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link></programlisting>
<para>
The ::repeat-mode-changed signal is emitted when a new repeat playing
mode has been set.
</para><variablelist role="params">
<varlistentry><term><parameter>player</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="RCLibPlayer"><type>RCLibPlayer</type></link> that received the signal</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mode</parameter>&#160;:</term>
<listitem><simpara>the new repeat mode</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>

</refentry>
