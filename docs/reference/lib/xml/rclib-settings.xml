<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
]>
<refentry id="LibRhythmCat-Settings">
<refmeta>
<refentrytitle role="top_of_page" id="LibRhythmCat-Settings.top_of_page">Settings</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  LIBRHYTHMCAT Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Settings</refname>
<refpurpose>Manage the settings</refpurpose>
</refnamediv>

<refsynopsisdiv id="LibRhythmCat-Settings.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
#include &lt;rclib-settings.h&gt;

<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-settings-apply">rclib_settings_apply</link>                ();
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-settings-exit">rclib_settings_exit</link>                 ();
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="rclib-settings-get-boolean">rclib_settings_get_boolean</link>          (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link> *          <link linkend="rclib-settings-get-boolean-list">rclib_settings_get_boolean_list</link>     (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> *length</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gdouble"><returnvalue>gdouble</returnvalue></link>             <link linkend="rclib-settings-get-double">rclib_settings_get_double</link>           (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gdouble"><returnvalue>gdouble</returnvalue></link> *           <link linkend="rclib-settings-get-double-list">rclib_settings_get_double_list</link>      (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> *length</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gint"><returnvalue>gint</returnvalue></link>                <link linkend="rclib-settings-get-integer">rclib_settings_get_integer</link>          (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gint"><returnvalue>gint</returnvalue></link> *              <link linkend="rclib-settings-get-integer-list">rclib_settings_get_integer_list</link>     (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> *length</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             <link linkend="rclib-settings-get-string">rclib_settings_get_string</link>           (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gchar"><returnvalue>gchar</returnvalue></link> **            <link linkend="rclib-settings-get-string-list">rclib_settings_get_string_list</link>      (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> *length</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="rclib-settings-has-key">rclib_settings_has_key</link>              (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter><link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="rclib-settings-init">rclib_settings_init</link>                 ();
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="rclib-settings-load-from-file">rclib_settings_load_from_file</link>       (<parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-settings-set-boolean">rclib_settings_set_boolean</link>          (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> value</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-settings-set-boolean-list">rclib_settings_set_boolean_list</link>     (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> list[]</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> length</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-settings-set-double">rclib_settings_set_double</link>           (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gdouble"><type>gdouble</type></link> value</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-settings-set-double-list">rclib_settings_set_double_list</link>      (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gdouble"><type>gdouble</type></link> list[]</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> length</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-settings-set-integer">rclib_settings_set_integer</link>          (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> value</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-settings-set-integer-list">rclib_settings_set_integer_list</link>     (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> list[]</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> length</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-settings-set-string">rclib_settings_set_string</link>           (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *string</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-settings-set-string-list">rclib_settings_set_string_list</link>      (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> * const list[]</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> length</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-settings-sync">rclib_settings_sync</link>                 ();
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-settings-update">rclib_settings_update</link>               ();
</synopsis>
</refsynopsisdiv>

<refsect1 id="LibRhythmCat-Settings.description" role="desc">
<title role="desc.title">Description</title>
<para>
Manage the settings in the player. The settings can be used in this
library or the frontend UI. This module uses <link linkend="GKeyFile"><type>GKeyFile</type></link> to store
settings in .INI file style.
</para>
<para>
Notice: The settings are only used when the application is starting,
or quiting, for load/save the settings. If you want to read or apply
settings, you should check if the settings can be applied directly,
if the settings are only used when the application is starting, then
save them in this module.
</para>
</refsect1>
<refsect1 id="LibRhythmCat-Settings.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="rclib-settings-apply" role="function">
<title>rclib_settings_apply ()</title>
<indexterm zone="rclib-settings-apply"><primary>rclib_settings_apply</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_settings_apply                ();</programlisting>
<para>
Apply the settings to the modules in library.
</para></refsect2>
<refsect2 id="rclib-settings-exit" role="function">
<title>rclib_settings_exit ()</title>
<indexterm zone="rclib-settings-exit"><primary>rclib_settings_exit</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_settings_exit                 ();</programlisting>
<para>
Unload the setings module and save the settings to the settings file.
</para></refsect2>
<refsect2 id="rclib-settings-get-boolean" role="function">
<title>rclib_settings_get_boolean ()</title>
<indexterm zone="rclib-settings-get-boolean"><primary>rclib_settings_get_boolean</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            rclib_settings_get_boolean          (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Returns the value associated with key under group_name as a boolean.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>return location for a GError, or NULL</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The value associated with the key as a boolean, or FALSE if the
key was not found or could not be parsed.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-settings-get-boolean-list" role="function">
<title>rclib_settings_get_boolean_list ()</title>
<indexterm zone="rclib-settings-get-boolean-list"><primary>rclib_settings_get_boolean_list</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link> *          rclib_settings_get_boolean_list     (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> *length</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Returns the values associated with key under group_name as booleans.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara>the number of booleans returned</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>return location for a GError, or NULL</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The values associated with the key as a list of booleans, or
NULL if the key was not found or could not be parsed.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-settings-get-double" role="function">
<title>rclib_settings_get_double ()</title>
<indexterm zone="rclib-settings-get-double"><primary>rclib_settings_get_double</primary></indexterm>
<programlisting><link linkend="gdouble"><returnvalue>gdouble</returnvalue></link>             rclib_settings_get_double           (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Returns the value associated with key under group_name as a double.
If group_name is NULL, the start_group is used.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>return location for a GError, or NULL</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The value associated with the key as a double, or 0.0
if the key was not found or could not be parsed.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-settings-get-double-list" role="function">
<title>rclib_settings_get_double_list ()</title>
<indexterm zone="rclib-settings-get-double-list"><primary>rclib_settings_get_double_list</primary></indexterm>
<programlisting><link linkend="gdouble"><returnvalue>gdouble</returnvalue></link> *           rclib_settings_get_double_list      (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> *length</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Returns the values associated with key under group_name as doubles.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara>the number of doubles returned</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>return location for a GError, or NULL</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The values associated with the key as a list of doubles, or
NULL if the key was not found or could not be parsed.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-settings-get-integer" role="function">
<title>rclib_settings_get_integer ()</title>
<indexterm zone="rclib-settings-get-integer"><primary>rclib_settings_get_integer</primary></indexterm>
<programlisting><link linkend="gint"><returnvalue>gint</returnvalue></link>                rclib_settings_get_integer          (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Returns the value associated with key under group_name as an integer.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>return location for a GError, or NULL</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The value associated with the key as an integer, or 0
if the key was not found or could not be parsed.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-settings-get-integer-list" role="function">
<title>rclib_settings_get_integer_list ()</title>
<indexterm zone="rclib-settings-get-integer-list"><primary>rclib_settings_get_integer_list</primary></indexterm>
<programlisting><link linkend="gint"><returnvalue>gint</returnvalue></link> *              rclib_settings_get_integer_list     (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> *length</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Returns the values associated with key under group_name as integers.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara>the number of integers returned</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>return location for a GError, or NULL</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The values associated with the key as a list of integers, or
NULL if the key was not found or could not be parsed.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-settings-get-string" role="function">
<title>rclib_settings_get_string ()</title>
<indexterm zone="rclib-settings-get-string"><primary>rclib_settings_get_string</primary></indexterm>
<programlisting><link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             rclib_settings_get_string           (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Returns the string value associated with key under group_name.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>return location for a GError, or NULL</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A newly allocated string or NULL if the specified key cannot
be found.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-settings-get-string-list" role="function">
<title>rclib_settings_get_string_list ()</title>
<indexterm zone="rclib-settings-get-string-list"><primary>rclib_settings_get_string_list</primary></indexterm>
<programlisting><link linkend="gchar"><returnvalue>gchar</returnvalue></link> **            rclib_settings_get_string_list      (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> *length</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Returns the values associated with key under group_name.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara>return location for the number of returned strings, or NULL</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>return location for a GError, or NULL</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A NULL-terminated string array or NULL if the specified key
cannot be found. The array should be freed with <link linkend="g-strfreev"><function>g_strfreev()</function></link>.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-settings-has-key" role="function">
<title>rclib_settings_has_key ()</title>
<indexterm zone="rclib-settings-has-key"><primary>rclib_settings_has_key</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            rclib_settings_has_key              (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter><link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Looks whether the key file has the key in the group.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>return location for a GError</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>TRUE if key is a part of group_name, FALSE otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-settings-init" role="function">
<title>rclib_settings_init ()</title>
<indexterm zone="rclib-settings-init"><primary>rclib_settings_init</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            rclib_settings_init                 ();</programlisting>
<para>
Initialize the settings module.
</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>the path of the settings file</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>Whether the initialization succeeded.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-settings-load-from-file" role="function">
<title>rclib_settings_load_from_file ()</title>
<indexterm zone="rclib-settings-load-from-file"><primary>rclib_settings_load_from_file</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            rclib_settings_load_from_file       (<parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);</programlisting>
<para>
Load settings from file.
</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>the path of the settings file</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>Whether the settings are loaded successfully.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-settings-set-boolean" role="function">
<title>rclib_settings_set_boolean ()</title>
<indexterm zone="rclib-settings-set-boolean"><primary>rclib_settings_set_boolean</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_settings_set_boolean          (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> value</parameter>);</programlisting>
<para>
Associates a new boolean value with key under group_name. If key cannot
be found then it is created. If group_name cannot be found then it is
created.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>TRUE or FALSE</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-settings-set-boolean-list" role="function">
<title>rclib_settings_set_boolean_list ()</title>
<indexterm zone="rclib-settings-set-boolean-list"><primary>rclib_settings_set_boolean_list</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_settings_set_boolean_list     (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> list[]</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> length</parameter>);</programlisting>
<para>
Associates a list of boolean values with key under group_name. If key
cannot be found then it is created. If group_name is NULL, the
start_group is used.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>an array of boolean values</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara>number of string values in list</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-settings-set-double" role="function">
<title>rclib_settings_set_double ()</title>
<indexterm zone="rclib-settings-set-double"><primary>rclib_settings_set_double</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_settings_set_double           (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gdouble"><type>gdouble</type></link> value</parameter>);</programlisting>
<para>
Associates a new double value with key under group_name. If key cannot
be found then it is created. If group_name cannot be found then it is
created.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>an double value</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-settings-set-double-list" role="function">
<title>rclib_settings_set_double_list ()</title>
<indexterm zone="rclib-settings-set-double-list"><primary>rclib_settings_set_double_list</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_settings_set_double_list      (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gdouble"><type>gdouble</type></link> list[]</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> length</parameter>);</programlisting>
<para>
Associates a list of double values with key under group_name. If key
cannot be found then it is created. If group_name is NULL, the
start_group is used.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>an array of double values</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara>number of double values in list</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-settings-set-integer" role="function">
<title>rclib_settings_set_integer ()</title>
<indexterm zone="rclib-settings-set-integer"><primary>rclib_settings_set_integer</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_settings_set_integer          (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> value</parameter>);</programlisting>
<para>
Associates a new integer value with key under group_name. If key cannot
be found then it is created. If group_name cannot be found then it is
created.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>an integer value</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-settings-set-integer-list" role="function">
<title>rclib_settings_set_integer_list ()</title>
<indexterm zone="rclib-settings-set-integer-list"><primary>rclib_settings_set_integer_list</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_settings_set_integer_list     (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> list[]</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> length</parameter>);</programlisting>
<para>
Associates a list of integer values with key under group_name. If key
cannot be found then it is created. If group_name is NULL, the
start_group is used.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>an array of integer values</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara>number of integer values in list</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-settings-set-string" role="function">
<title>rclib_settings_set_string ()</title>
<indexterm zone="rclib-settings-set-string"><primary>rclib_settings_set_string</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_settings_set_string           (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *string</parameter>);</programlisting>
<para>
Associates a new string value with key under group_name. If key cannot
be found then it is created. If group_name cannot be found then it is
created.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>string</parameter>&#160;:</term>
<listitem><simpara>a string</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-settings-set-string-list" role="function">
<title>rclib_settings_set_string_list ()</title>
<indexterm zone="rclib-settings-set-string-list"><primary>rclib_settings_set_string_list</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_settings_set_string_list      (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> * const list[]</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> length</parameter>);</programlisting>
<para>
Associates a list of string values for key under group_name. If key
cannot be found then it is created. If group_name cannot be found then
it is created.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>an array of string values</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara>number of string values in list</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-settings-sync" role="function">
<title>rclib_settings_sync ()</title>
<indexterm zone="rclib-settings-sync"><primary>rclib_settings_sync</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_settings_sync                 ();</programlisting>
<para>
Save the settings to file if they are changed (become dirty).
</para></refsect2>
<refsect2 id="rclib-settings-update" role="function">
<title>rclib_settings_update ()</title>
<indexterm zone="rclib-settings-update"><primary>rclib_settings_update</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_settings_update               ();</programlisting>
<para>
Update settings from the modules in the library.
</para></refsect2>

</refsect1>

</refentry>
