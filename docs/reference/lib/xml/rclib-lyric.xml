<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
]>
<refentry id="RCLibLyric">
<refmeta>
<refentrytitle role="top_of_page" id="RCLibLyric.top_of_page">RCLibLyric</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  LIBRHYTHMCAT Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>RCLibLyric</refname>
<refpurpose>The lyric processor</refpurpose>
</refnamediv>

<refsynopsisdiv id="RCLibLyric.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
#include &lt;rclib-lyric.h&gt;

#define             <link linkend="RCLIB-LYRIC-TYPE:CAPS">RCLIB_LYRIC_TYPE</link>
struct              <link linkend="RCLibLyric-struct">RCLibLyric</link>;
struct              <link linkend="RCLibLyricClass">RCLibLyricClass</link>;
struct              <link linkend="RCLibLyricData">RCLibLyricData</link>;
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-lyric-init">rclib_lyric_init</link>                    ();
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-lyric-exit">rclib_lyric_exit</link>                    ();
<link linkend="GObject"><returnvalue>GObject</returnvalue></link> *           <link linkend="rclib-lyric-get-instance">rclib_lyric_get_instance</link>            ();
<link linkend="gulong"><returnvalue>gulong</returnvalue></link>              <link linkend="rclib-lyric-signal-connect">rclib_lyric_signal_connect</link>          (<parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>,
                                                         <parameter><link linkend="GCallback"><type>GCallback</type></link> callback</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> data</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-lyric-signal-disconnect">rclib_lyric_signal_disconnect</link>       (<parameter><link linkend="gulong"><type>gulong</type></link> handler_id</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-lyric-set-fallback-encoding">rclib_lyric_set_fallback_encoding</link>   (<parameter>const <link linkend="gchar"><type>gchar</type></link> *encoding</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="rclib-lyric-get-fallback-encoding">rclib_lyric_get_fallback_encoding</link>   ();
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="rclib-lyric-load-file">rclib_lyric_load_file</link>               (<parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>,
                                                         <parameter><link linkend="guint"><type>guint</type></link> index</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-lyric-clean">rclib_lyric_clean</link>                   (<parameter><link linkend="guint"><type>guint</type></link> index</parameter>);
const <link linkend="RCLibLyricData"><returnvalue>RCLibLyricData</returnvalue></link> * <link linkend="rclib-lyric-get-line">rclib_lyric_get_line</link>             (<parameter><link linkend="guint"><type>guint</type></link> index</parameter>,
                                                         <parameter><link linkend="gint64"><type>gint64</type></link> time</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rclib-lyric-set-search-dir">rclib_lyric_set_search_dir</link>          (<parameter>const <link linkend="gchar"><type>gchar</type></link> *dir</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="rclib-lyric-get-search-dir">rclib_lyric_get_search_dir</link>          ();
<link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             <link linkend="rclib-lyric-search-lyric">rclib_lyric_search_lyric</link>            (<parameter>const <link linkend="gchar"><type>gchar</type></link> *uri</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *title</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *artist</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="rclib-lyric-is-available">rclib_lyric_is_available</link>            (<parameter><link linkend="guint"><type>guint</type></link> index</parameter>);
</synopsis>
</refsynopsisdiv>
<refsect1 id="RCLibLyric.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----RCLibLyric
</synopsis>
</refsect1>
<refsect1 id="RCLibLyric.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="RCLibLyric-line-changed">line-changed</link>&quot;                                   : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link>
  &quot;<link linkend="RCLibLyric-lyric-ready">lyric-ready</link>&quot;                                    : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link>
  &quot;<link linkend="RCLibLyric-lyric-timer">lyric-timer</link>&quot;                                    : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link>
</synopsis>
</refsect1>

<refsect1 id="RCLibLyric.description" role="desc">
<title role="desc.title">Description</title>
<para>
The <link linkend="RCLibLyric"><type>RCLibLyric</type></link> is a class which processes the lyric data. It can read
lyric data from lyric file, and then parse them. It can load two lyric
tracks. The timer inside can send signals for lyric display.
</para>
</refsect1>
<refsect1 id="RCLibLyric.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="RCLIB-LYRIC-TYPE:CAPS" role="macro">
<title>RCLIB_LYRIC_TYPE</title>
<indexterm zone="RCLIB-LYRIC-TYPE:CAPS"><primary>RCLIB_LYRIC_TYPE</primary></indexterm>
<programlisting>#define RCLIB_LYRIC_TYPE (rclib_lyric_get_type())
</programlisting>
</refsect2>
<refsect2 id="RCLibLyric-struct" role="struct">
<title>struct RCLibLyric</title>
<indexterm zone="RCLibLyric-struct"><primary>RCLibLyric</primary></indexterm>
<programlisting>struct RCLibLyric;</programlisting>
<para>
The lyric processor. The contents of the <link linkend="RCLibLyric"><type>RCLibLyric</type></link> structure are
private and should only be accessed via the provided API.
</para></refsect2>
<refsect2 id="RCLibLyricClass" role="struct">
<title>struct RCLibLyricClass</title>
<indexterm zone="RCLibLyricClass"><primary>RCLibLyricClass</primary></indexterm>
<programlisting>struct RCLibLyricClass {
};
</programlisting>
<para>
<link linkend="RCLibLyric"><type>RCLibLyric</type></link> class.
</para></refsect2>
<refsect2 id="RCLibLyricData" role="struct">
<title>struct RCLibLyricData</title>
<indexterm zone="RCLibLyricData"><primary>RCLibLyricData</primary></indexterm>
<programlisting>struct RCLibLyricData {
    gint64 time;
    gint64 length;
    gchar *text;
};
</programlisting>
<para>
The structure for lyric data.
</para><variablelist role="struct">
<varlistentry><term><link linkend="gint64"><type>gint64</type></link>&#160;<structfield id="RCLibLyricData.time">time</structfield>;</term>
<listitem><simpara>the time line (unit: nanosecond)</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gint64"><type>gint64</type></link>&#160;<structfield id="RCLibLyricData.length">length</structfield>;</term>
<listitem><simpara>the length (unit: nanosecond)</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCLibLyricData.text">text</structfield>;</term>
<listitem><simpara>the lyric text</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-lyric-init" role="function">
<title>rclib_lyric_init ()</title>
<indexterm zone="rclib-lyric-init"><primary>rclib_lyric_init</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_lyric_init                    ();</programlisting>
<para>
Initialize the lyric process instance.
</para></refsect2>
<refsect2 id="rclib-lyric-exit" role="function">
<title>rclib_lyric_exit ()</title>
<indexterm zone="rclib-lyric-exit"><primary>rclib_lyric_exit</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_lyric_exit                    ();</programlisting>
<para>
Unload the lyric process instance.
</para></refsect2>
<refsect2 id="rclib-lyric-get-instance" role="function">
<title>rclib_lyric_get_instance ()</title>
<indexterm zone="rclib-lyric-get-instance"><primary>rclib_lyric_get_instance</primary></indexterm>
<programlisting><link linkend="GObject"><returnvalue>GObject</returnvalue></link> *           rclib_lyric_get_instance            ();</programlisting>
<para>
Get the running <link linkend="RCLibLyric"><type>RCLibLyric</type></link> instance.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The running instance.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-lyric-signal-connect" role="function">
<title>rclib_lyric_signal_connect ()</title>
<indexterm zone="rclib-lyric-signal-connect"><primary>rclib_lyric_signal_connect</primary></indexterm>
<programlisting><link linkend="gulong"><returnvalue>gulong</returnvalue></link>              rclib_lyric_signal_connect          (<parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>,
                                                         <parameter><link linkend="GCallback"><type>GCallback</type></link> callback</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> data</parameter>);</programlisting>
<para>
Connect the GCallback function to the given signal for the running
instance of <link linkend="RCLibLyric"><type>RCLibLyric</type></link> object.
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>the name of the signal</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara>the the <link linkend="GCallback"><type>GCallback</type></link> to connect</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the user data</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The handler ID.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-lyric-signal-disconnect" role="function">
<title>rclib_lyric_signal_disconnect ()</title>
<indexterm zone="rclib-lyric-signal-disconnect"><primary>rclib_lyric_signal_disconnect</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_lyric_signal_disconnect       (<parameter><link linkend="gulong"><type>gulong</type></link> handler_id</parameter>);</programlisting>
<para>
Disconnects a handler from the running <link linkend="RCLibLyric"><type>RCLibLyric</type></link> instance so it
will not be called during any future or currently ongoing emissions
of the signal it has been connected to. The <link linkend="handler-id"><type>handler_id</type></link> becomes
invalid and may be reused.
</para><variablelist role="params">
<varlistentry><term><parameter>handler_id</parameter>&#160;:</term>
<listitem><simpara>handler id of the handler to be disconnected</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-lyric-set-fallback-encoding" role="function">
<title>rclib_lyric_set_fallback_encoding ()</title>
<indexterm zone="rclib-lyric-set-fallback-encoding"><primary>rclib_lyric_set_fallback_encoding</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_lyric_set_fallback_encoding   (<parameter>const <link linkend="gchar"><type>gchar</type></link> *encoding</parameter>);</programlisting>
<para>
Set the fallback encoding for the lyric parser.
</para><variablelist role="params">
<varlistentry><term><parameter>encoding</parameter>&#160;:</term>
<listitem><simpara>the fallback encoding, set to NULL if not used</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-lyric-get-fallback-encoding" role="function">
<title>rclib_lyric_get_fallback_encoding ()</title>
<indexterm zone="rclib-lyric-get-fallback-encoding"><primary>rclib_lyric_get_fallback_encoding</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       rclib_lyric_get_fallback_encoding   ();</programlisting>
<para>
Get the fallback encoding for the lyric parser, NULL if it is no set.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The fallback encoding, do not free or modify it.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-lyric-load-file" role="function">
<title>rclib_lyric_load_file ()</title>
<indexterm zone="rclib-lyric-load-file"><primary>rclib_lyric_load_file</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            rclib_lyric_load_file               (<parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>,
                                                         <parameter><link linkend="guint"><type>guint</type></link> index</parameter>);</programlisting>
<para>
Load lyric file and then parse it.
</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>the lyric file to load</simpara></listitem></varlistentry>
<varlistentry><term><parameter>index</parameter>&#160;:</term>
<listitem><simpara>the lyric track index (0 or 1)</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>Whether the file is loaded and parsed.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-lyric-clean" role="function">
<title>rclib_lyric_clean ()</title>
<indexterm zone="rclib-lyric-clean"><primary>rclib_lyric_clean</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_lyric_clean                   (<parameter><link linkend="guint"><type>guint</type></link> index</parameter>);</programlisting>
<para>
Clean the lyric data in the running lyric prcessor instance.
</para><variablelist role="params">
<varlistentry><term><parameter>index</parameter>&#160;:</term>
<listitem><simpara>the lyric track index</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-lyric-get-line" role="function">
<title>rclib_lyric_get_line ()</title>
<indexterm zone="rclib-lyric-get-line"><primary>rclib_lyric_get_line</primary></indexterm>
<programlisting>const <link linkend="RCLibLyricData"><returnvalue>RCLibLyricData</returnvalue></link> * rclib_lyric_get_line             (<parameter><link linkend="guint"><type>guint</type></link> index</parameter>,
                                                         <parameter><link linkend="gint64"><type>gint64</type></link> time</parameter>);</programlisting>
<para>
Find the lyric line which matches to the given time (in nanoseconds).
</para><variablelist role="params">
<varlistentry><term><parameter>time</parameter>&#160;:</term>
<listitem><simpara>the time to search</simpara></listitem></varlistentry>
<varlistentry><term><parameter>index</parameter>&#160;:</term>
<listitem><simpara>the lyric track index</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The matched line data, NULL if not found.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-lyric-set-search-dir" role="function">
<title>rclib_lyric_set_search_dir ()</title>
<indexterm zone="rclib-lyric-set-search-dir"><primary>rclib_lyric_set_search_dir</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rclib_lyric_set_search_dir          (<parameter>const <link linkend="gchar"><type>gchar</type></link> *dir</parameter>);</programlisting>
<para>
Set the directory for searching the lyric files.
</para><variablelist role="params">
<varlistentry><term><parameter>dir</parameter>&#160;:</term>
<listitem><simpara>the directory to set</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-lyric-get-search-dir" role="function">
<title>rclib_lyric_get_search_dir ()</title>
<indexterm zone="rclib-lyric-get-search-dir"><primary>rclib_lyric_get_search_dir</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       rclib_lyric_get_search_dir          ();</programlisting>
<para>
Get the directory for searching the lyric files.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The directory path.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-lyric-search-lyric" role="function">
<title>rclib_lyric_search_lyric ()</title>
<indexterm zone="rclib-lyric-search-lyric"><primary>rclib_lyric_search_lyric</primary></indexterm>
<programlisting><link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             rclib_lyric_search_lyric            (<parameter>const <link linkend="gchar"><type>gchar</type></link> *uri</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *title</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *artist</parameter>);</programlisting>
<para>
Search the lyric file by given information.
</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara>the URI</simpara></listitem></varlistentry>
<varlistentry><term><parameter>title</parameter>&#160;:</term>
<listitem><simpara>the title</simpara></listitem></varlistentry>
<varlistentry><term><parameter>artist</parameter>&#160;:</term>
<listitem><simpara>the artist</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The lyric file path, NULL if not found.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rclib-lyric-is-available" role="function">
<title>rclib_lyric_is_available ()</title>
<indexterm zone="rclib-lyric-is-available"><primary>rclib_lyric_is_available</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            rclib_lyric_is_available            (<parameter><link linkend="guint"><type>guint</type></link> index</parameter>);</programlisting>
<para>
Check whether the lyric in the given track index is available.
</para><variablelist role="params">
<varlistentry><term><parameter>index</parameter>&#160;:</term>
<listitem><simpara>the lyric track index</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>Whether the lyric is available.</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 id="RCLibLyric.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="RCLibLyric-line-changed" role="signal"><title>The <literal>&quot;line-changed&quot;</literal> signal</title>
<indexterm zone="RCLibLyric-line-changed"><primary>RCLibLyric::line-changed</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="RCLibLyric"><type>RCLibLyric</type></link> *lyric,
                                                        <link linkend="guint"><type>guint</type></link>       index,
                                                        <link linkend="gpointer"><type>gpointer</type></link>    lyric_data,
                                                        <link linkend="gpointer"><type>gpointer</type></link>    user_data)       : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link></programlisting>
<para>
The ::line-changed signal is emitted when a lyric line has been
found which matches the current playing position.
</para><variablelist role="params">
<varlistentry><term><parameter>lyric</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="RCLibLyric"><type>RCLibLyric</type></link> that received the signal</simpara></listitem></varlistentry>
<varlistentry><term><parameter>index</parameter>&#160;:</term>
<listitem><simpara>the track index of the current lyric line</simpara></listitem></varlistentry>
<varlistentry><term><parameter>lyric_data</parameter>&#160;:</term>
<listitem><simpara>the lyric data of the current lyric line</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="RCLibLyric-lyric-ready" role="signal"><title>The <literal>&quot;lyric-ready&quot;</literal> signal</title>
<indexterm zone="RCLibLyric-lyric-ready"><primary>RCLibLyric::lyric-ready</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="RCLibLyric"><type>RCLibLyric</type></link> *lyric,
                                                        <link linkend="guint"><type>guint</type></link>       index,
                                                        <link linkend="gpointer"><type>gpointer</type></link>    user_data)      : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link></programlisting>
<para>
The ::lyric-ready signal is emitted when a lyric track is
ready to be used.
</para><variablelist role="params">
<varlistentry><term><parameter>lyric</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="RCLibLyric"><type>RCLibLyric</type></link> that received the signal</simpara></listitem></varlistentry>
<varlistentry><term><parameter>index</parameter>&#160;:</term>
<listitem><simpara>the track index which is ready</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="RCLibLyric-lyric-timer" role="signal"><title>The <literal>&quot;lyric-timer&quot;</literal> signal</title>
<indexterm zone="RCLibLyric-lyric-timer"><primary>RCLibLyric::lyric-timer</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="RCLibLyric"><type>RCLibLyric</type></link> *lyric,
                                                        <link linkend="guint"><type>guint</type></link>       index,
                                                        <link linkend="gint64"><type>gint64</type></link>      pos,
                                                        <link linkend="gpointer"><type>gpointer</type></link>    lyric_data,
                                                        <link linkend="gpointer"><type>gpointer</type></link>    user_data)       : <link linkend="G-SIGNAL-RUN-FIRST:CAPS"><literal>Run First</literal></link></programlisting>
<para>
The ::lyric-timer signal is emitted every 100ms, used for
lyric display.
</para><variablelist role="params">
<varlistentry><term><parameter>lyric</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="RCLibLyric"><type>RCLibLyric</type></link> that received the signal</simpara></listitem></varlistentry>
<varlistentry><term><parameter>index</parameter>&#160;:</term>
<listitem><simpara>the track index of the current lyric line</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara>current time position</simpara></listitem></varlistentry>
<varlistentry><term><parameter>lyric_data</parameter>&#160;:</term>
<listitem><simpara>the lyric data of the current lyric line</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>

</refentry>
